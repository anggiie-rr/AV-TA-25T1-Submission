#include <iostream>
#include <map>
#include <vector>
#include <initializer_list>
#include <memory> // Include memory for smart pointers
#include <cmath> // Include cmath for pow function

using namespace std; // Using namespace for convenience

const int values[] = { 1, 2, 3, 4, 5 };
const int val_size = sizeof(values) / sizeof(int); // Fixed variable name to match with the loop

class Foo {
    std::vector<int> mElements;
public:
    Foo(std::initializer_list<int> list) : mElements(list) {}
};

struct Person { // Corrected to use a named struct
    int age;
    float weight;
};

void show_output(const int** pp) {
    printf("%p : %p : %d\n", pp, *pp, **pp); // Added newline for better output formatting
}

int main() {
    int x = -10;
    int y = 15;
    cout << " " << (x, y) << std::endl; // The comma operator evaluates to 'y'

    // Print integer ratios of y:x till x < y
    // Invalid ratios should print 0
    while (x < y) {
        cout << "ratio: " << (x != 0 ? (y / x) : 0) << endl; // Added check to avoid division by zero
        x++;
        y--;
    }

    int i = 1, j = 1; // Don't change values
    if ((i = !3) & (j = 1)) { // This will set i to 0 and j to 1
        cout << "j is 1 and i is not 3\n";
    } else {
        cout << "either j is NOT 1, or i is set to 3\n";
    }

    typedef map<int, double> valmap;
    valmap m;

    for (int i = 0; i < val_size; i++) // Fixed variable name to val_size
        m.insert(make_pair(values[i], pow(values[i], 0.5))); // Use of pow requires <cmath>

    m.insert(make_pair(1, 2.0)); // Use make_pair to insert a pair correctly

    int n = 1;
    int* p = &n;
    show_output(reinterpret_cast<const int**>(&p)); // Cast to match the expected pointer type

    // Initialise a person on the heap with the use of smart pointers (unique_ptr) instead.
    std::unique_ptr<Person> ptr = std::make_unique<Person>(); // Using unique_ptr
    ptr->age = 10;
    ptr->weight = 55.5;

    // Initialise with 5 integers
    Foo foo{ 1, 2, 3, 4, 5 }; // Initialize Foo with 5 integers

    return 0;
}
