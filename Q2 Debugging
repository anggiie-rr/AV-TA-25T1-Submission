#include <vector>
#include <thread>
#include <iostream>
#include <mutex> // Include mutex for thread safety

int total = 0;

class Wallet
{
    int mMoney;
    std::mutex mtx; // Mutex to protect access to mMoney
public:
    Wallet() : mMoney(0) {}

    int getMoney() {
        return mMoney;
    }

    void addMoney(int money) {
        for (int i = 0; i < money; ++i) {
            std::lock_guard<std::mutex> lock(mtx); // Lock the mutex for this scope
            mMoney++;
            // The lock_guard will automatically unlock when it goes out of scope
        }
    }
};

int fillWalletWithMoney() {
    Wallet walletObject;
    std::vector<std::thread> threads;

    for (int i = 0; i < 5; ++i) {
        threads.push_back(std::thread(&Wallet::addMoney, &walletObject, 1000));
    }

    for (int i = 0; i < threads.size(); i++) {
        threads.at(i).join();
    }

    return walletObject.getMoney();
}

int main() {
    int val = 0;
    for (int k = 0; k < 1000; k++) {
        if ((val = fillWalletWithMoney()) != 5000) {
            std::cout << "Error at count = " << k << " Money in Wallet = " << val << std::endl;
            return EXIT_FAILURE;
        }
    }
    return 0;
}
